
for (unsigned int i = 0; i < G_RecoMuSize; ++i) {

  if (G_MuonID_Fiducial[i] && G_MuonID_GLBorTRKArb[i]) {

    UInt_t GenSize = 0;
    GenSize = G_GEN_PromptMuon_4vec.size();
    int isMatchedTo = 0; 

    for (UInt_t j = 0; j < GenSize; ++j) {
      
      Double_t dR = 999.;
      dR = G_Muon_4vec[i].DeltaR(G_GEN_PromptMuon_4vec[j]);
      
      if (dR < 0.1) {
	isMatchedTo = j+1;
	break;
      }
      
    }

    G_Muon_Matching.push_back(isMatchedTo);

  }

}

int count_matched = 0;
int count_1 = 0;
int count_2 = 0;

for (unsigned int i = 0; i < G_RecoMuSize; ++i) {

  if (G_Muon_Matching[i]) {
    ++count_matched;
    if (G_Muon_Matching[i] == 1) ++count_1;
    else if (G_Muon_Matching[i] == 2) ++count_2;
  }

 }

if (G_Muon_Matching[0]) {
  if (count_matched == 2) {
    if (count_1 != count_2) {
      if (count_1 == 2 && count_2 == 0) {
	std::cout << "[Warning][Event "<< Get<int>("T_Event_EventNumber") 
		  <<"] Both RECO muons matched to GEN muon 1" << std::endl;
      }
      else if (count_1 == 0 && count_2 == 2) {
	std::cout << "[Warning][Event "<< Get<int>("T_Event_EventNumber") 
		  <<"] Both RECO muons matched to GEN muon 2" << std::endl;
      }
    }
  }
  else if (count_matched > 2) {
    std::cout << "[Warning][Event "<< Get<int>("T_Event_EventNumber") 
	      <<"] More than 2 RECO muons matched to the GEN muons" << std::endl;
  }
 }

    
	